"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = __importStar(require("chai"));
var chai_truffle_1 = __importDefault(require("../../lib/chai-truffle"));
var TestContract = artifacts.require("Test");
chai_1.default.use(chai_truffle_1.default);
describe(".not.emitEvent()", function () {
    it("should fail when the call is reading a state", function () { return __awaiter(_this, void 0, void 0, function () {
        var contractInstance, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, TestContract.new()];
                case 1:
                    contractInstance = _a.sent();
                    return [4 /*yield*/, contractInstance.eventId()];
                case 2:
                    response = _a.sent();
                    chai_1.expect(function () {
                        chai_1.expect(response).not.to.emitEvent();
                    }).to.throw("to be a Truffle TransactionResponse");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should fail when the call is calling a view function", function () { return __awaiter(_this, void 0, void 0, function () {
        var contractInstance, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, TestContract.new()];
                case 1:
                    contractInstance = _a.sent();
                    return [4 /*yield*/, contractInstance.nextEventId()];
                case 2:
                    response = _a.sent();
                    chai_1.expect(function () {
                        chai_1.expect(response).not.to.emitEvent();
                    }).to.throw("to be a Truffle TransactionResponse");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should support custom error message", function () { return __awaiter(_this, void 0, void 0, function () {
        var contractInstance, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, TestContract.new()];
                case 1:
                    contractInstance = _a.sent();
                    return [4 /*yield*/, contractInstance.emitTestEvent()];
                case 2:
                    response = _a.sent();
                    chai_1.expect(function () {
                        chai_1.expect(response).not.to.emitEvent(undefined, "Custom error message");
                    }).to.throw("Custom error message");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should pass when the call has not emitted any event", function () { return __awaiter(_this, void 0, void 0, function () {
        var contractInstance, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, TestContract.new()];
                case 1:
                    contractInstance = _a.sent();
                    return [4 /*yield*/, contractInstance.doNothing()];
                case 2:
                    response = _a.sent();
                    chai_1.expect(response).not.to.emitEvent();
                    return [2 /*return*/];
            }
        });
    }); });
    context("Given event name", function () {
        it("should fail when provided value is not TransactionResponse", function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                chai_1.expect(function () {
                    chai_1.expect("Hello World").not.to.emitEvent("TestEvent");
                }).to.throw("to be a Truffle TransactionResponse");
                return [2 /*return*/];
            });
        }); });
        it("should fail when the call has emitted the specified event", function () { return __awaiter(_this, void 0, void 0, function () {
            var contractInstance, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TestContract.new()];
                    case 1:
                        contractInstance = _a.sent();
                        return [4 /*yield*/, contractInstance.emitTestEvent()];
                    case 2:
                        response = _a.sent();
                        chai_1.expect(function () {
                            chai_1.expect(response).not.to.emitEvent("TestEvent");
                        }).to.throw("expected transaction not to emit event 'TestEvent', but was emitted");
                        return [2 /*return*/];
                }
            });
        }); });
        it("should support error message", function () { return __awaiter(_this, void 0, void 0, function () {
            var contractInstance, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TestContract.new()];
                    case 1:
                        contractInstance = _a.sent();
                        return [4 /*yield*/, contractInstance.emitTestEvent()];
                    case 2:
                        response = _a.sent();
                        chai_1.expect(function () {
                            chai_1.expect(response).not.to.emitEvent("TestEvent", "Custom error message");
                        }).to.throw("Custom error message: expected transaction not to emit event 'TestEvent', but was emitted");
                        return [2 /*return*/];
                }
            });
        }); });
        it("should pass when the call has not emitted the specified event", function () { return __awaiter(_this, void 0, void 0, function () {
            var contractInstance, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TestContract.new()];
                    case 1:
                        contractInstance = _a.sent();
                        return [4 /*yield*/, contractInstance.emitMessageEvent("Hello World")];
                    case 2:
                        response = _a.sent();
                        chai_1.expect(response).not.to.emitEvent("TestEvent");
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
describe(".emitEvent()", function () {
    it("should fail when provided value is not TransactionResponse", function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            chai_1.expect(function () {
                chai_1.expect("Hello World").to.emitEvent();
            }).to.throw("to be a Truffle TransactionResponse");
            return [2 /*return*/];
        });
    }); });
    it("should fail when the call is reading a state", function () { return __awaiter(_this, void 0, void 0, function () {
        var contractInstance, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, TestContract.new()];
                case 1:
                    contractInstance = _a.sent();
                    return [4 /*yield*/, contractInstance.eventId()];
                case 2:
                    response = _a.sent();
                    chai_1.expect(function () {
                        chai_1.expect(response).to.emitEvent();
                    }).to.throw("to be a Truffle TransactionResponse");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should fail when the call is calling a view function", function () { return __awaiter(_this, void 0, void 0, function () {
        var contractInstance, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, TestContract.new()];
                case 1:
                    contractInstance = _a.sent();
                    return [4 /*yield*/, contractInstance.nextEventId()];
                case 2:
                    response = _a.sent();
                    chai_1.expect(function () {
                        chai_1.expect(response).to.emitEvent();
                    }).to.throw("to be a Truffle TransactionResponse");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should support custom error message", function () { return __awaiter(_this, void 0, void 0, function () {
        var contractInstance, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, TestContract.new()];
                case 1:
                    contractInstance = _a.sent();
                    return [4 /*yield*/, contractInstance.doNothing()];
                case 2:
                    response = _a.sent();
                    chai_1.expect(function () {
                        chai_1.expect(response).to.emitEvent(undefined, "Custom error message");
                    }).to.throw("Custom error message: expected transaction to emit event, but none was emitted");
                    return [2 /*return*/];
            }
        });
    }); });
    it("should pass when the call has emitted an event", function () { return __awaiter(_this, void 0, void 0, function () {
        var contractInstance, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, TestContract.new()];
                case 1:
                    contractInstance = _a.sent();
                    return [4 /*yield*/, contractInstance.emitTestEvent()];
                case 2:
                    response = _a.sent();
                    chai_1.expect(response).to.emitEvent();
                    return [2 /*return*/];
            }
        });
    }); });
    context("Given event name", function () {
        it("should fail when the call has not emitted the specified event", function () { return __awaiter(_this, void 0, void 0, function () {
            var contractInstance, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TestContract.new()];
                    case 1:
                        contractInstance = _a.sent();
                        return [4 /*yield*/, contractInstance.emitMessageEvent("Hello World")];
                    case 2:
                        response = _a.sent();
                        chai_1.expect(function () {
                            chai_1.expect(response).to.emitEvent("TestEvent");
                        }).to.throw("expected transaction to emit event 'TestEvent', but was not emitted");
                        return [2 /*return*/];
                }
            });
        }); });
        it("should support custom error message", function () { return __awaiter(_this, void 0, void 0, function () {
            var contractInstance, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TestContract.new()];
                    case 1:
                        contractInstance = _a.sent();
                        return [4 /*yield*/, contractInstance.emitMessageEvent("Hello World")];
                    case 2:
                        response = _a.sent();
                        chai_1.expect(function () {
                            chai_1.expect(response).to.emitEvent("TestEvent", "Custom error message");
                        }).to.throw("Custom error message: expected transaction to emit event 'TestEvent', but was not emitted");
                        return [2 /*return*/];
                }
            });
        }); });
        it("should pass when the call has emitted the specified event", function () { return __awaiter(_this, void 0, void 0, function () {
            var contractInstance, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, TestContract.new()];
                    case 1:
                        contractInstance = _a.sent();
                        return [4 /*yield*/, contractInstance.emitTestEvent()];
                    case 2:
                        response = _a.sent();
                        chai_1.expect(response).to.emitEvent("TestEvent");
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=emitEvent.test.js.map